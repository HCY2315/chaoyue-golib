// Code generated by "enumer -type=MetricConstType -trimprefix=MetricConstType"; DO NOT EDIT.

package prometheus

import (
	"fmt"
	"strings"
)

const _MetricConstTypeName = "CSTMetricNoneCSTMetricGaugeCSTMetricGaugeVecCSTMetricCounterCSTMetricCounterVecCSTMetricHistogramCSTMetricHistogramVecCSTMetricSummaryCSTMetricSummaryVecCSTMetricMax"

var _MetricConstTypeIndex = [...]uint8{0, 13, 27, 44, 60, 79, 97, 118, 134, 153, 165}

const _MetricConstTypeLowerName = "cstmetricnonecstmetricgaugecstmetricgaugeveccstmetriccountercstmetriccounterveccstmetrichistogramcstmetrichistogramveccstmetricsummarycstmetricsummaryveccstmetricmax"

func (i MetricConstType) String() string {
	if i < 0 || i >= MetricConstType(len(_MetricConstTypeIndex)-1) {
		return fmt.Sprintf("MetricConstType(%d)", i)
	}
	return _MetricConstTypeName[_MetricConstTypeIndex[i]:_MetricConstTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MetricConstTypeNoOp() {
	var x [1]struct{}
	_ = x[CSTMetricNone-(0)]
	_ = x[CSTMetricGauge-(1)]
	_ = x[CSTMetricGaugeVec-(2)]
	_ = x[CSTMetricCounter-(3)]
	_ = x[CSTMetricCounterVec-(4)]
	_ = x[CSTMetricHistogram-(5)]
	_ = x[CSTMetricHistogramVec-(6)]
	_ = x[CSTMetricSummary-(7)]
	_ = x[CSTMetricSummaryVec-(8)]
	_ = x[CSTMetricMax-(9)]
}

var _MetricConstTypeValues = []MetricConstType{CSTMetricNone, CSTMetricGauge, CSTMetricGaugeVec, CSTMetricCounter, CSTMetricCounterVec, CSTMetricHistogram, CSTMetricHistogramVec, CSTMetricSummary, CSTMetricSummaryVec, CSTMetricMax}

var _MetricConstTypeNameToValueMap = map[string]MetricConstType{
	_MetricConstTypeName[0:13]:         CSTMetricNone,
	_MetricConstTypeLowerName[0:13]:    CSTMetricNone,
	_MetricConstTypeName[13:27]:        CSTMetricGauge,
	_MetricConstTypeLowerName[13:27]:   CSTMetricGauge,
	_MetricConstTypeName[27:44]:        CSTMetricGaugeVec,
	_MetricConstTypeLowerName[27:44]:   CSTMetricGaugeVec,
	_MetricConstTypeName[44:60]:        CSTMetricCounter,
	_MetricConstTypeLowerName[44:60]:   CSTMetricCounter,
	_MetricConstTypeName[60:79]:        CSTMetricCounterVec,
	_MetricConstTypeLowerName[60:79]:   CSTMetricCounterVec,
	_MetricConstTypeName[79:97]:        CSTMetricHistogram,
	_MetricConstTypeLowerName[79:97]:   CSTMetricHistogram,
	_MetricConstTypeName[97:118]:       CSTMetricHistogramVec,
	_MetricConstTypeLowerName[97:118]:  CSTMetricHistogramVec,
	_MetricConstTypeName[118:134]:      CSTMetricSummary,
	_MetricConstTypeLowerName[118:134]: CSTMetricSummary,
	_MetricConstTypeName[134:153]:      CSTMetricSummaryVec,
	_MetricConstTypeLowerName[134:153]: CSTMetricSummaryVec,
	_MetricConstTypeName[153:165]:      CSTMetricMax,
	_MetricConstTypeLowerName[153:165]: CSTMetricMax,
}

var _MetricConstTypeNames = []string{
	_MetricConstTypeName[0:13],
	_MetricConstTypeName[13:27],
	_MetricConstTypeName[27:44],
	_MetricConstTypeName[44:60],
	_MetricConstTypeName[60:79],
	_MetricConstTypeName[79:97],
	_MetricConstTypeName[97:118],
	_MetricConstTypeName[118:134],
	_MetricConstTypeName[134:153],
	_MetricConstTypeName[153:165],
}

// MetricConstTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetricConstTypeString(s string) (MetricConstType, error) {
	if val, ok := _MetricConstTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MetricConstTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MetricConstType values", s)
}

// MetricConstTypeValues returns all values of the enum
func MetricConstTypeValues() []MetricConstType {
	return _MetricConstTypeValues
}

// MetricConstTypeStrings returns a slice of all String values of the enum
func MetricConstTypeStrings() []string {
	strs := make([]string, len(_MetricConstTypeNames))
	copy(strs, _MetricConstTypeNames)
	return strs
}

// IsAMetricConstType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MetricConstType) IsAMetricConstType() bool {
	for _, v := range _MetricConstTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
